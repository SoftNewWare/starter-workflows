name: Update Confluence on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  update-confluence:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full commit history is available

      - name: Fetch Latest Confluence Page Version
        id: fetch_version
        env:
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_KEY: ${{ secrets.CONFLUENCE_API_KEY }}
          CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL }}
          PAGE_ID: "98308"  # Replace with your actual Confluence page ID
        run: |
          RESPONSE=$(curl -s -u "$CONFLUENCE_USERNAME:$CONFLUENCE_API_KEY" \
            -X GET "$CONFLUENCE_BASE_URL/rest/api/content/$PAGE_ID?expand=version")

          VERSION=$(echo "$RESPONSE" | jq -r '.version.number')

          if [ "$VERSION" == "null" ]; then
            echo "Error fetching version. Response: $RESPONSE"
            exit 1
          fi

          echo "Current page version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Confluence Table
        id: generate_table
        run: |
          MODULE_NAME="${{ github.repository }}"  # Extract repo name
          echo "Generated MODULE_NAME:"
          echo "$MODULE_NAME"
          # Start HTML table
          table="<table><tr><th>Module Name</th><th>Commit ID</th><th>Commit Message</th><th>Commit Date & Time</th></tr>"

          # Fetch commits from merged PR
          git log --pretty=format:"%H|%s|%cd" --date=local ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while IFS='|' read -r COMMIT_ID COMMIT_MSG COMMIT_DATE; do
            table="$table<tr><td>$MODULE_NAME</td><td>$COMMIT_ID</td><td>$COMMIT_MSG</td><td>$COMMIT_DATE</td></tr>"
          done

          table="$table</table>"

          # Print debug info
          echo "Generated Table:"
          echo "$table"

          # Store in environment variable
          echo "TABLE_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$table" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Confluence Page
        env:
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_KEY: ${{ secrets.CONFLUENCE_API_KEY }}
          CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL }}
          PAGE_ID: "98308"
          VERSION: ${{ env.VERSION }}
          TABLE_CONTENT: ${{ env.TABLE_CONTENT }}
        run: |
          UPDATED_VERSION=$((VERSION + 1))

          PAYLOAD=$(jq -n \
            --arg title "Changelog Updates" \
            --arg body "$TABLE_CONTENT" \
            --arg version "$UPDATED_VERSION" \
            '{
              "version": { "number": ($version | tonumber) },
              "title": $title,
              "type": "page",
              "body": { "storage": { "value": $body, "representation": "storage" } }
            }')

          # Debug payload
          echo "Final JSON Payload being sent to Confluence:"
          echo "$PAYLOAD"

          RESPONSE=$(curl -s -X PUT \
            -u "$CONFLUENCE_USERNAME:$CONFLUENCE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "$PAYLOAD" \
            "$CONFLUENCE_BASE_URL/rest/api/content/$PAGE_ID")

          # Print Confluence response
          echo "Response from Confluence API:"
          echo "$RESPONSE"

          # Check if Confluence updated successfully
          if echo "$RESPONSE" | jq -e '.statusCode == 200 or .id' > /dev/null; then
            echo "Confluence page updated successfully!"
          else
            echo "Error updating Confluence page. Response: $RESPONSE"
            exit 1
          fi
