name: Update Confluence on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  update_confluence:
    if: github.event.pull_request.merged == true  # Only run if PR is merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history

      - name: Debug PR SHAs
        run: |
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"

      - name: Fetch all commits
        run: git fetch --unshallow || git fetch --all

      - name: Generate Confluence Table
        id: generate_table
        run: |
          MODULE_NAME="${{ github.repository }}"  # Extracts repo name (Module Name)

          # Start the table HTML
          table="<table><tr><th>Module Name</th><th>Commit ID</th><th>Commit Message</th><th>Commit Date & Time</th></tr>"

          # Add each commit to the table
          git log --pretty=format:"%H %s %cd" --date=local ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while read commit; do
            COMMIT_ID=$(echo $commit | cut -d' ' -f1)
            COMMIT_MSG=$(echo $commit | cut -d' ' -f2-)
            COMMIT_DATE=$(echo $commit | cut -d' ' -f3-)
            table="$table<tr><td>$MODULE_NAME</td><td>$COMMIT_ID</td><td>$COMMIT_MSG</td><td>$COMMIT_DATE</td></tr>"
          done

          # Close the table HTML
          table="$table</table>"

          # Output table content into a file for later usage
          echo "$table" > confluence_table.html

          # Read the generated table content
          TABLE_CONTENT=$(<confluence_table.html)
          echo "TABLE_CONTENT=$TABLE_CONTENT" >> $GITHUB_ENV

      - name: Fetch Confluence Page Version
        id: fetch_version
        run: |
          # Fetch the current version of the page
          RESPONSE=$(curl -u "$CONFLUENCE_USERNAME:$CONFLUENCE_API_KEY" \
            "$CONFLUENCE_BASE_URL/rest/api/content/$PAGE_ID")
          
          # Extract the version number from the response
          VERSION=$(echo $RESPONSE | jq '.version.number')
          echo "Current Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update Confluence Page
        env:
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_KEY: ${{ secrets.CONFLUENCE_API_KEY }}
          CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL }}
          PAGE_ID: "98308"  # Replace with your actual Confluence Page ID
          VERSION: ${{ env.VERSION }}
        run: |
          # Increment the version by 1
          UPDATED_VERSION=$((VERSION + 1))

          PAYLOAD=$(jq -n \
            --arg title "Changelog Updates" \
            --arg body "$TABLE_CONTENT" \
            --arg version "$UPDATED_VERSION" \
            '{
              "version": { "number": ($version | tonumber) },
              "title": $title,
              "type": "page",
              "body": { "storage": { "value": $body, "representation": "wiki" } }
            }')

          # Print the payload for debugging
          echo "Payload being sent to Confluence:"
          echo "$PAYLOAD"

          # Perform the API call and capture the response
          RESPONSE=$(curl -X PUT \
            -u "$CONFLUENCE_USERNAME:$CONFLUENCE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "$PAYLOAD" \
            "$CONFLUENCE_BASE_URL/rest/api/content/$PAGE_ID")

          # Print the response for debugging
          echo "Response from Confluence API:"
          echo "$RESPONSE"
