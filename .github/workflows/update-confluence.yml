name: Update Confluence Page with Commits

on:
  workflow_dispatch:  # Allow manual trigger

  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - '**'

jobs:
  update-confluence:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      CONFLUENCE_URL: https://airnewn.atlassian.net/wiki
      SPACE_KEY: "ENG"
      PAGE_TITLE: "Changelog Updates"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get Page ID from title
        id: get_page
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.CONFLUENCE_PAT }}" \
            "$CONFLUENCE_URL/rest/api/content?title=${PAGE_TITLE// /%20}&spaceKey=$SPACE_KEY")

          PAGE_ID=$(echo "$RESPONSE" | jq -r '.results[0].id')

          if [ "$PAGE_ID" = "null" ] || [ -z "$PAGE_ID" ]; then
            echo "Page not found. You must manually create the page first."
            exit 1
          fi

          echo "PAGE_ID=$PAGE_ID" >> $GITHUB_ENV

      - name: Generate commit markdown rows
        id: commits
        run: |
          echo "Generating Markdown commit table rows..."
          REPO_NAME="${{ github.repository }}"
          PR_LINK="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"

          echo "| Serial | Module Name | Commit ID | Commit Message | Pull Request | Commit Author | Commit Date & Time |" > table_rows.md
          echo "|--------|-------------|-----------|----------------|--------------|----------------|----------------------|" >> table_rows.md

          git log -n 5 --pretty=format:"| | $REPO_NAME | %h | %s | [$PR_LINK]($PR_LINK) | %an | %ad |" --date=iso >> table_rows.md

      - name: Get current page content and version
        id: page
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.CONFLUENCE_PAT }}" \
            "$CONFLUENCE_URL/rest/api/content/$PAGE_ID?expand=body.storage,version")

          VERSION=$(echo "$RESPONSE" | jq '.version.number')
          CONTENT=$(echo "$RESPONSE" | jq -r '.body.storage.value')

          echo "version=$((VERSION + 1))" >> $GITHUB_OUTPUT
          echo "CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Append new commit rows in markdown format
        run: |
          NEW_ROWS=$(cat table_rows.md)
          CONTENT="${{ env.CONTENT }}"

          # Remove any html tags if present (basic cleanup)
          SANITIZED_CONTENT=$(echo "$CONTENT" | sed 's/<[^>]*>//g')

          # Append markdown content
          UPDATED_CONTENT="$SANITIZED_CONTENT\n\n$NEW_ROWS"

          JSON=$(jq -n \
            --arg id "$PAGE_ID" \
            --arg title "$PAGE_TITLE" \
            --arg space_key "$SPACE_KEY" \
            --arg version "${{ steps.page.outputs.version }}" \
            --arg value "$UPDATED_CONTENT" \
            '{
              id: $id,
              type: "page",
              title: $title,
              space: { key: $space_key },
              version: { number: ($version | tonumber) },
              body: {
                storage: {
                  value: $value,
                  representation: "wiki"
                }
              }
            }')

          echo "$JSON" > payload.json

          curl -s -X PUT "$CONFLUENCE_URL/rest/api/content/$PAGE_ID" \
            -H "Authorization: Bearer ${{ secrets.CONFLUENCE_PAT }}" \
            -H "Content-Type: application/json" \
            -d @payload.json